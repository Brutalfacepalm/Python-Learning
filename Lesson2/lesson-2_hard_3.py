# Задание-3: "Перевёрнутая башня" (Задача олимпиадного уровня)
#
# Вавилонцы решили построить удивительную башню —
# расширяющуюся к верху и содержащую бесконечное число этажей и комнат.
# Она устроена следующим образом — на первом этаже одна комната,
# затем идет два этажа, на каждом из которых по две комнаты,
# затем идёт три этажа, на каждом из которых по три комнаты и так далее:
#         ...
#   27  28  29  30
#   23  24  25  26
#   19  20  21  22
#   15  16  17  18
#     12  13  14
#     9   10  11
#     6   7   8
#       4   5
#       2   3
#         1
#
# Эту башню решили оборудовать лифтом --- и вот задача:
# нужно научиться по номеру комнаты определять,
# на каком этаже она находится и какая она по счету слева на этом этаже.
#
# Входные данные: В первой строчке задан номер комнаты N, 1 ≤ N ≤ 2 000 000 000.
#
# Выходные данные:  Два целых числа — номер этажа и порядковый номер слева на этаже.
#
# Пример:
# Вход: 13
# Выход: 6 2
#
# Вход: 11
# Выход: 5 3
import random
N = random.randint(1,2000000000) # Генерируется число для нахождения
# N = 11
# N = 13
# N = 15
# N = 22
# N = 1
# N = 2
i = 0
sqr = 0
rows = 0
cols = 0

# т.к. пирамида состоит из квадратных блоков,
# число столбцов и строк в котором на 1 больше предыдущего сектора
# вычеслим основание блока, в который входит искомое число, этаж,
# с которго начинается блок и начальнуй цифру блока

while N > sqr: # Цикл выполняется пока мы не перейдем в блок выше искомого
    i += 1
    sqr += i ** 2 # определяется граница цикла
    rows += i   # первый этаж следующего блока
    sqr_bef = sqr - i ** 2 # определяется число из предидущего блока

sqr_bef += 1 # первое число искомого блока
in_rows = i # ширина и высота блока
rows = rows-i+1 # первый этаж искомого блока

while N >= sqr_bef + in_rows: # Цикл выполняется пока мы не попадем на искомый этаж
    sqr_bef += in_rows
    rows += 1

while N >= sqr_bef: # Цикл выполняется пока мы не попадем на искомое число
    sqr_bef += 1
    cols += 1

print('Вход: {}\nВыход: {} {}'.format(N, rows, cols))
